{"ast":null,"code":"var _jsxFileName = \"/home/yozheng/cs/ibm/to-do-list_week1-yozheng-afk/src/component/todos.js\";\nimport React from \"react\";\nimport \"../component/todos.css\";\nimport { Card, CardContent, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\"; // 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = _ref => {\n  let {\n    todos,\n    deletes\n  } = _ref;\n  const todoList = todos.length ? todos.map(todo => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: \"50px\"\n            },\n            children: todo.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              color: \"red\",\n              elevation: 0\n            },\n            onClick: deletes(todo),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You have no todo's left\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this); // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    },\n    children: todoList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","Card","CardContent","Grid","ListItemButton","ListItemText","Checkbox","Todos","todos","deletes","todoList","length","map","todo","padding","content","color","elevation","id"],"sources":["/home/yozheng/cs/ibm/to-do-list_week1-yozheng-afk/src/component/todos.js"],"sourcesContent":["import React from \"react\";\nimport \"../component/todos.css\";\nimport {Card,CardContent,Grid,ListItemButton,ListItemText,Checkbox,} from \"@mui/material\";\n\n// 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\nconst Todos = ({ todos, deletes}) => {\n    const todoList = todos.length ? (\n      todos.map((todo) => {\n        return (\n          <Grid key={todo.id}>\n            <Card>\n              {/* Remember, we set the local state of this todo item when the user submits the form in \n              AddTodo.js. All we need to do is return the todo list item */}\n              <CardContent>\n                <span style={{ padding: \"50px\" }}>{todo.content}</span>\n                <button style={{ color:\"red\", elevation: 0}} onClick={deletes(todo)}>X</button>\n              </CardContent>\n            </Card>\n          </Grid>\n        );\n      })\n    ) : (\n      <p>{\"You have no todo's left\"}</p>\n    );\n    // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n    return (\n      <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\n        {todoList}\n      </div>\n    );\n};\n  \nexport default Todos;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AACA,SAAQC,IAAR,EAAaC,WAAb,EAAyBC,IAAzB,EAA8BC,cAA9B,EAA6CC,YAA7C,EAA0DC,QAA1D,QAA0E,eAA1E,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAAuB;EAAA,IAAtB;IAAEC,KAAF;IAASC;EAAT,CAAsB;EACjC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,GACfH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;IAClB,oBACE,QAAC,IAAD;MAAA,uBACE,QAAC,IAAD;QAAA,uBAGE,QAAC,WAAD;UAAA,wBACE;YAAM,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAX,CAAb;YAAA,UAAmCD,IAAI,CAACE;UAAxC;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAQ,KAAK,EAAE;cAAEC,KAAK,EAAC,KAAR;cAAeC,SAAS,EAAE;YAA1B,CAAf;YAA6C,OAAO,EAAER,OAAO,CAACI,IAAD,CAA7D;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA;MAHF;QAAA;QAAA;QAAA;MAAA;IADF,GAAWA,IAAI,CAACK,EAAhB;MAAA;MAAA;MAAA;IAAA,QADF;EAYD,CAbD,CADe,gBAgBf;IAAA,UAAI;EAAJ;IAAA;IAAA;IAAA;EAAA,QAhBF,CADiC,CAmBjC;;EACA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAE;MAAEJ,OAAO,EAAE;IAAX,CAAvC;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKH,CAzBD;;KAAMH,K;AA2BN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}